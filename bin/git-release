#!/bin/bash

NEXT=$1
MESSAGE=$2

if [[ $# < 1 ]]; then
    echo -e "usage: git release increment:patch|minor|major|init|x.x.x [message]"
    exit 1
fi

git fetch --tags 2> /dev/null

LAST_VERSION=$(git describe --abbrev=0 --tags --match="v*" 2> /dev/null)
VERSION=$(echo "$LAST_VERSION" | tr -d "v")


while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
  -g | --get )
    echo $LAST_VERSION
    exit 0
    ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi


NEXT_VERSION="v$(bump "$NEXT" "$VERSION")"
if [[ $? != 0 ]]; then
    exit 1
fi

if [[ ( -z "$MESSAGE" ) || ( "$MESSAGE" == "auto" ) ]]; then
    MESSAGE=$(git log $LAST_VERSION..HEAD --no-merges --oneline | cut -d " " -f "2-" | sed -e 's/^/- /')
fi

git hook run --ignore-missing pre-release -- $NEXT_VERSION $LAST_VERSION ${@:3}
if [[ $? != 0 ]]; then
    echo "exit because pre-release exit with $?"
    exit 1
fi

git tag -a $NEXT_VERSION -m "$MESSAGE"
if [[ $? != 0 ]]; then
    echo "couldn't tag"
    exit 1
fi

git push --follow-tags

echo "$NEXT_VERSION"


BODY="Release of version $NEXT_VERSION"
if [[ -n "$MESSAGE" ]]; then
    BODY="$BODY\n\n$MESSAGE"
fi
NAME="$NEXT_VERSION"
REF="master"

GIT_HOST=$(git host)
if [[ "$GIT_HOST" == "github.com" && -n "$GITHUB_TOKEN" ]]; then
    REPO=$(git name)
    DATA='{"tag_name":"'$NEXT_VERSION'","target_commitish":"'$REF'","name":"'$NAME'","body":"'$BODY'","draft":false,"prerelease":false}'
    if ! curl --fail --request POST \
        --url "https://api.github.com/repos/$REPO/releases" \
        --header "Accept: application/vnd.github.v3+json" \
        --header "Authentication: token $GITHUB_TOKEN" \
        --data "$DATA"; then
        echo "failed to create github release"
        exit 2
    fi
elif [[ "$GIT_HOST" == "gitlab.com" && -n "$GITLAB_TOKEN" ]]; then
    if [[ -z "$GITLAB_PROJECT_ID" ]]; then
        echo "Missing GITLAB_PROJECT_ID environment variable"
        exit 2
    fi
    DATA='{"name": "'$NAME'", "tag_name": "'$NEXT_VERSION'", "description": "'$BODY'", "ref": "'$REF'" }'
    URL="https://gitlab.com/api/v4/projects/$PROJECT_ID/releases"
    if ! curl --fail --request POST \
        --url "$URL" \
        --header "Content-Type: application/json" \
        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --data "$DATA"; then
        echo "failed to create gitlab release"
        exit 2
    fi
fi

git hook run --ignore-missing post-release -- "$NEXT_VERSION" "$LAST_VERSION"

